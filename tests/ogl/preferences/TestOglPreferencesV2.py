
from typing import cast

from unittest import TestSuite
from unittest import main as unitTestMain

from pathlib import Path

from codeallybasic.ConfigurationLocator import ConfigurationLocator
from codeallybasic.UnitTestBase import UnitTestBase

from miniogl.MiniOglColorEnum import MiniOglColorEnum

from ogl.OglDimensions import OglDimensions

from ogl.preferences.OglPreferencesV2 import MODULE_NAME
from ogl.preferences.OglPreferencesV2 import OglPreferencesV2
from ogl.preferences.OglPreferencesV2 import PREFERENCES_FILE_NAME


class TestOglPreferencesV2(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ Humberto A. Sanchez II
        Generated: 18 October 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()

        locator: ConfigurationLocator = ConfigurationLocator()
        self.logger.debug(f'{locator.configurationHome=}')
        prefsPath: Path = locator.applicationPath(applicationName=MODULE_NAME, create=False)

        prefsFile: Path = prefsPath / PREFERENCES_FILE_NAME
        # Save the original in case it exists
        if prefsFile.exists() is True:
            self._savePath: Path = prefsFile.rename(f'{prefsFile}.SAVE')
        else:
            self._savePath = cast(Path, None)

        self._prefsFile: Path = prefsFile

    def tearDown(self):
        super().tearDown()

        # Remove the newly created one
        # put the original back
        if self._savePath is not None:
            self._prefsFile.unlink(missing_ok=True)
            self._savePath.rename(str(self._prefsFile))

    def testDefaultInstantiation(self):

        oglPreferencesV2: OglPreferencesV2 = OglPreferencesV2()

        self.assertIsNotNone(oglPreferencesV2, 'We should get an object')
        self.assertEqual(14, oglPreferencesV2.textFontSize)
        self.assertFalse(oglPreferencesV2.centerDiagram)

        # test something in another section
        self.assertFalse(oglPreferencesV2.centerDiagram, 'Should be False and accessible')
        gridLineColor: MiniOglColorEnum = oglPreferencesV2.gridLineColor

        self.assertTrue(isinstance(gridLineColor, MiniOglColorEnum), 'Wrong type returned')

        instanceDimensions: OglDimensions = oglPreferencesV2.instanceDimensions
        self.assertTrue(isinstance(instanceDimensions, OglDimensions), 'Wrong type returned')

    def testGetTextFontFamily(self):

        oglPreferencesV2: OglPreferencesV2 = OglPreferencesV2()

        self.assertIsNotNone(oglPreferencesV2.textFontFamily, 'Something should be there')

    def testSetTextFontFamily(self):

        oglPreferencesV2: OglPreferencesV2 = OglPreferencesV2()

        oglPreferencesV2.textFontFamily = 'Script'

        self.logger.info(oglPreferencesV2.textFontFamily)

    def testStringGet(self):

        prefsV2: OglPreferencesV2 = OglPreferencesV2()

        noteText: str = prefsV2.noteText
        self.assertTrue(len(noteText) > 0, 'Should not be empty')

    def testStringSet(self):

        prefsV2: OglPreferencesV2 = OglPreferencesV2()

        prefsV2.noteText = 'I changed it'
        self.assertEqual(prefsV2.noteText, 'I changed it', 'Hmm, why did it not change')

    def testOglDimensionsGet(self):
        prefsV2: OglPreferencesV2 = OglPreferencesV2()

        actualDimensions: OglDimensions = prefsV2.noteDimensions
        self.assertIsNotNone(actualDimensions, 'I should get some value')

        expectedDimensions: OglDimensions = OglDimensions(100, 50)

        self.assertEqual(expectedDimensions, actualDimensions, 'Why are they not equal')

    def testOglDimensionsSet(self):

        prefsV2:  OglPreferencesV2 = OglPreferencesV2()
        expected: OglDimensions = OglDimensions(1000, 1000)
        prefsV2.noteDimensions = expected

        actual: OglDimensions = prefsV2.noteDimensions

        self.assertEqual(expected, actual, 'Why did they not change.')


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestOglPreferencesV2))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
