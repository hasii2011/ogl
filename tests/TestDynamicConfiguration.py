from enum import Enum
from unittest import TestSuite
from unittest import main as unitTestMain

from codeallybasic.UnitTestBase import UnitTestBase

from ogl.OglDimensions import OglDimensions
from tests.DynamicConfiguration import ValueDescription
from tests.DynamicConfiguration import DynamicConfiguration
from tests.DynamicConfiguration import UnDefinedValueDescription
from tests.DynamicConfiguration import ValueDescriptions
from tests.DynamicConfiguration import KeyName
from tests.DynamicConfiguration import SectionName
from tests.DynamicConfiguration import Sections


class UnitTestEnumeration(Enum):
    HUMBERTO = 'The Great One'
    FRAN     = 'La Esposa'
    OZZEE    = 'El Gato Malo'

    @classmethod
    def deSerialize(cls, value: str) -> 'UnitTestEnumeration':

        match value:
            case UnitTestEnumeration.HUMBERTO.value:
                enumeration: UnitTestEnumeration = UnitTestEnumeration.HUMBERTO
            case UnitTestEnumeration.FRAN.value:
                enumeration = UnitTestEnumeration.FRAN
            case UnitTestEnumeration.OZZEE.value:
                enumeration = UnitTestEnumeration.OZZEE
            case _:
                raise Exception('Unknown enumeration value')

        return enumeration

    def __str__(self) -> str:
        return self.name


MODULE_NAME:           str = 'dynamite'
PREFERENCES_FILE_NAME: str = f'{MODULE_NAME}.ini'


oglDynoProperties: ValueDescriptions = ValueDescriptions(
    {
        KeyName('noteText'):       ValueDescription(defaultValue='This is the note text'),
        KeyName('valueEnum'):      ValueDescription(defaultValue=UnitTestEnumeration.HUMBERTO.value,  enumUseValue=True),
        KeyName('nameEnum'):       ValueDescription(defaultValue=UnitTestEnumeration.OZZEE.__str__(), enumUseName=True),
        KeyName('noteDimensions'): ValueDescription(defaultValue=str(OglDimensions(100, 50)),         deserializer=OglDimensions.deSerialize)
    }
)

sections: Sections = Sections(
    {
        SectionName('Ogl'): oglDynoProperties
    }
)


class TestDynamicConfiguration(UnitTestBase):
    """
    Auto generated by the one and only:
        Gato Malo â€“ HUMBERTO A. Sanchez II
        Generated: 19 October 2024
    """

    @classmethod
    def setUpClass(cls):
        super().setUpClass()

    def setUp(self):
        super().setUp()
        self._dyno: DynamicConfiguration = DynamicConfiguration(baseFileName='dynamite.ini', moduleName=MODULE_NAME, sections=sections)

        # locator: ConfigurationLocator = ConfigurationLocator()
        # self.logger.debug(f'{locator.configurationHome=}')
        # prefsPath: Path = locator.applicationPath(applicationName=MODULE_NAME, create=False)
        #
        # prefsFile: Path = prefsPath / PREFERENCES_FILE_NAME
        # # Save the original in case it exists
        # if prefsFile.exists() is True:
        #     self._savePath: Path = prefsFile.rename(f'{prefsFile}.SAVE')
        # else:
        #     self._savePath = cast(Path, None)
        #
        # self._prefsFile: Path = prefsFile

    def tearDown(self):
        super().tearDown()

        # Remove the newly created one
        # put the original back
        # if self._savePath is not None:
        #     self._prefsFile.unlink(missing_ok=True)
        #     self._savePath.rename(str(self._prefsFile))

    def testDeserializer(self):
        dyno: DynamicConfiguration = self._dyno

        noteDimensions: OglDimensions = dyno.noteDimensions

        self.assertTrue(isinstance(noteDimensions, OglDimensions), 'Incorrect type')

    def testEnumPropertyUsesName(self):
        dyno: DynamicConfiguration = self._dyno
        dyno.nameEnum = UnitTestEnumeration.FRAN

    def testEnumPropertyUsesValue(self):
        dyno: DynamicConfiguration = self._dyno
        dyno.valueEnum = UnitTestEnumeration.OZZEE

    def testDynamicSet(self):
        dyno: DynamicConfiguration = self._dyno

        # print(f'{dyno.name=}')

        dyno.noteText = 'A new value'

    def testNoValueDescription(self):

        dyno: DynamicConfiguration = self._dyno

        self.assertRaises(UnDefinedValueDescription, lambda: self._setBadValue(dyno))

    def _setBadValue(self, dyno: DynamicConfiguration):
        dyno.bogusKey = 'I am bogus'


def suite() -> TestSuite:
    import unittest

    testSuite: TestSuite = TestSuite()

    testSuite.addTest(unittest.defaultTestLoader.loadTestsFromTestCase(testCaseClass=TestDynamicConfiguration))

    return testSuite


if __name__ == '__main__':
    unitTestMain()
